{"version":3,"sources":["components/card/card.jsx","components/cardlist/cardlist.jsx","components/searchcardlist/searchcardlist.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","console","log","react_default","a","createElement","className","alt","src","concat","user","id","key","name","email","Cardlist","users","map","obj","card_Card","Searchcardlist","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSearch","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","keyword","toLowerCase","filteredUsers","filter","includes","searchcardlist_Searchcardlist","cardlist_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAEaA,eAAO,SAACC,GAEjB,OADAC,QAAQC,IAAIF,GACJG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,OAAOC,IAAG,wBAAAC,OAA0BT,EAAMU,KAAKC,GAArC,eACnBR,EAAAC,EAAAC,cAAA,MAAIO,IAAKZ,EAAMU,KAAKC,IAAKX,EAAMU,KAAKG,MACpCV,EAAAC,EAAAC,cAAA,KAAGO,IAAKZ,EAAMU,KAAKC,IAAKX,EAAMU,KAAKI,UCDpCC,SAAW,SAACf,GAErB,OADAC,QAAQC,IAAIF,GACLG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEdN,EAAMgB,MAAMC,IAAI,SAACC,GACf,OAAOf,EAAAC,EAAAC,cAACc,EAAD,CAAMP,IAAKM,EAAIP,GAAID,KAAMQ,SCTjCE,SAAiB,SAACpB,GAE3B,OADAC,QAAQC,IAAIF,GACJG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SAAOgB,KAAK,SAASC,YAAY,eAAeC,SAAUvB,EAAMuB,cC+D/DC,cArCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,aAAe,SAACC,GACdR,EAAKS,SAAS,CAACC,YAAaF,EAAEG,OAAOC,OAAQ,kBAAIpC,QAAQC,IAAIuB,EAAKa,UANlEb,EAAKa,MAAQ,CACXtB,MAAO,GACPmB,YAAa,IAJJV,oFAUO,IAAAc,EAAAX,KAClBY,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAACzB,GAASuB,EAAKL,SAAS,CAAClB,MAAQA,IACvCf,QAAQC,IAAI,2BAA4Bc,iDAKxCf,QAAQC,IAAI,wEAGZD,QAAQC,IAAI,6DAGZ,IAAM0C,EAAUhB,KAAKU,MAAMH,YAAYU,cACjCC,EAAgBlB,KAAKU,MAAMtB,MAAM+B,OAAO,SAACrC,GAAS,OAAOA,EAAKG,KAAKgC,cAAcG,SAASJ,KAChG,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4C,EAAD,CAAgB1B,SAAUK,KAAKI,eAC/B7B,EAAAC,EAAAC,cAAC6C,EAAD,CAAUlC,MAAO8B,YA/BPK,aClBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.f7d09f11.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\nexport const Card = (props) => {\r\n    console.log(props)\r\n    return (<div className=\"card\">\r\n              <img alt=\"user\" src={`https://robohash.org/${props.user.id}/set=set2`}/>\r\n              <h3 key={props.user.id}>{props.user.name}</h3>\r\n              <p key={props.user.id}>{props.user.email}</p>\r\n          </div>)\r\n}","import React from 'react';\r\nimport {Card} from '../card/card'\r\nimport './cardlist.css'\r\n\r\n\r\n\r\nexport const Cardlist = (props) => {\r\n    console.log(props)\r\n    return <div className=\"cardlist\">\r\n        {\r\n            props.users.map((obj)=>{\r\n              return <Card key={obj.id} user={obj} />\r\n            })\r\n          }\r\n    </div>\r\n}","import React from 'react';\r\nimport './searchcardlist.css'\r\nexport const Searchcardlist = (props) => {\r\n    console.log(props)\r\n    return (<div className=\"searchcardlist\">\r\n              <input type=\"search\" placeholder=\"Search users\" onChange={props.onChange} />\r\n          </div>)\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport {Cardlist} from './components/cardlist/cardlist'\r\nimport {Searchcardlist} from './components/searchcardlist/searchcardlist'\r\n// {\r\n//   \"id\": 1,\r\n//   \"name\": \"Leanne Graham\",\r\n//   \"username\": \"Bret\",\r\n//   \"email\": \"Sincere@april.biz\",\r\n//   \"address\": {\r\n//   \"street\": \"Kulas Light\",\r\n//   \"suite\": \"Apt. 556\",\r\n//   \"city\": \"Gwenborough\",\r\n//   \"zipcode\": \"92998-3874\",\r\n//   \"geo\": {\r\n//   \"lat\": \"-37.3159\",\r\n//   \"lng\": \"81.1496\"\r\n//   }\r\n//   },\r\n//   \"phone\": \"1-770-736-8031 x56442\",\r\n//   \"website\": \"hildegard.org\",\r\n//   \"company\": {\r\n//   \"name\": \"Romaguera-Crona\",\r\n//   \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n//   \"bs\": \"harness real-time e-markets\"\r\n//   }\r\n//  },\r\n\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      users: [],\r\n      searchField: \"\"\r\n    }\r\n  }\r\n  handleSearch = (e) => {\r\n    this.setState({searchField: e.target.value}, ()=>console.log(this.state)); \r\n  }\r\n  componentWillMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then((users)=>{this.setState({users : users})\r\n    console.log(\"componentWillMount macha\", users)\r\n\r\n    })\r\n  }\r\n  componentDidMount(){\r\n    console.log(\"componentDidMount macha\")\r\n  }\r\n  componentDidUpdate(){\r\n    console.log(\"componentDidUpdate macha\")\r\n  }\r\n  render() {\r\n    const keyword = this.state.searchField.toLowerCase()\r\n    const filteredUsers = this.state.users.filter((user)=>{ return user.name.toLowerCase().includes(keyword)})\r\n    return (\r\n      <div className='App'>\r\n        <Searchcardlist onChange={this.handleSearch}/>\r\n        <Cardlist users={filteredUsers}/>\r\n      </div>\r\n      \r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}